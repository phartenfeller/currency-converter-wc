{"version":3,"sources":["webpack:///./src/currency-converter.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;;AAEA;AACA;AACA,2DAA2D,kBAAkB;AAC7E;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,qBAAqB,aAAa,KAAK,iBAAiB;AACxD;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA","file":"bundle.43ab2e5743ad4c117caf.js","sourcesContent":["const template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    .curr-shell {\n      color: #262626;\n      background: #F1F5F9;\n      border-radius: 16px;\n      padding: 4px 8px;\n      font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n      box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n    }\n  </style>\n  <span class=\"curr-shell\"></span>`;\n\nclass CurrencyConverter extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: 'open' });\n    this.shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  async fetchApi() {\n    return new Promise((resolve, reject) => {\n      fetch(`https://api.exchangeratesapi.io/latest?base=${this.baseCurrency}`)\n        .then((response) => response.json())\n        .then((data) => resolve(data))\n        .catch((err) => reject(err));\n    });\n  }\n\n  renderData() {\n    const browserLocale = navigator.language;\n    const originFormat = new Intl.NumberFormat(browserLocale, {\n      style: 'currency',\n      currency: this.baseCurrency,\n    });\n    const conversionFormat = new Intl.NumberFormat(browserLocale, {\n      style: 'currency',\n      currency: this.conversionCurrency,\n    });\n\n    const originAmount = originFormat.format(this.value);\n\n    this.convertedAmount =\n      this.value *\n      window.rates[this.baseCurrency].data.rates[this.conversionCurrency];\n\n    const conversionAmount = conversionFormat.format(this.convertedAmount);\n\n    this.shadowRoot.querySelector(\n      '.curr-shell'\n    ).innerText = `${originAmount} | ${conversionAmount}`;\n  }\n\n  async connectedCallback() {\n    this.baseCurrency = this.getAttribute('base-currency');\n    this.value = parseFloat(this.getAttribute('value'));\n    this.conversionCurrency = this.getAttribute('conversion-currency');\n\n    if (!window.rates) window.rates = {};\n\n    if (!window.rates[this.baseCurrency]) {\n      // first one -> fetch api\n      window.rates[this.baseCurrency] = {\n        status: 'fetching',\n        data: null,\n        callbacks: [],\n      };\n\n      window.rates[this.baseCurrency].data = await this.fetchApi();\n      window.rates[this.baseCurrency].status = 'loaded';\n      this.renderData();\n      // resolve all callbacks from the waiting ones\n      window.rates[this.baseCurrency].callbacks.forEach((cb) => cb());\n    } else if (window.rates[this.baseCurrency].status === 'fetching') {\n      // currently some else is fetching -> add callback to be called when done\n      window.rates[this.baseCurrency].callbacks.push(() => this.renderData());\n    } else {\n      // all data loaded\n      this.renderData();\n    }\n  }\n}\n\nwindow.customElements.define('currency-converter', CurrencyConverter);\n"],"sourceRoot":""}